{"version":3,"sources":["App.styled.js","components/Cell/Cell.styled.js","components/Cell/Cell.jsx","components/Board/Board.styled.js","components/Board/Board.jsx","components/Game/Game.styled.js","components/Game/Game.jsx","App.js","index.js"],"names":["Theme","styled","div","GlobalStyle","createGlobalStyle","CellStyled","props","gridWidth","margin","pressed","Cell","value","rest","BoardStyled","Board","mineCheck","index","original","testingGrid","gridToShow","checkerArray","bombCounter","console","log","advancedChecked","tempArray","filter","curr","map","checked","tempArrayAdvance","size","gridToShowHandler","onClick","e","button","gameOver","flagged","gameOverHandler","squarePressed","onContextMenu","flagHandler","key","GameStyled","ScoreBoard","Reset","Paragraph","p","Game","useState","bombs","setgridToShow","setGameOver","runGridGen","setRunGridGen","useEffect","populatedGrid","i","push","j","sort","a","b","Math","random","grid","newArray","preventDefault","tempGrid","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c93161a.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const Theme = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst margin = 1;\r\n\r\nexport const CellStyled = styled.div`\r\n  /* Have it modular, don't hard code the 8 or the 4. */\r\n  /* Centering numbers & bombs in Cell */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  width: calc((100% / ${(props) => props.gridWidth}) - ${margin * 2}px);\r\n  height: calc((100% / ${(props) => props.gridWidth}) - ${margin * 2}px);\r\n  background-color: lightgrey;\r\n  margin: ${margin}px;\r\n\r\n  box-shadow: ${(props) =>\r\n    props.pressed\r\n      ? \"inset 1px 1px 1px 1px grey\"\r\n      : \"inset -1px -1px 1px 1px grey\"};\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { CellStyled } from \"./Cell.styled\";\r\n\r\nexport const Cell = ({ gridWidth, value, pressed, ...rest }) => {\r\n  // console.log(value);\r\n\r\n  return (\r\n    <CellStyled gridWidth={gridWidth} pressed={pressed} {...rest}>\r\n      {value}\r\n    </CellStyled>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const BoardStyled = styled.div`\r\n  display: flexbox;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { Cell } from \"./../index\";\r\n\r\nimport { BoardStyled } from \"./Board.styled\";\r\n\r\nexport const Board = (props) => {\r\n  ///////////////////////// Creator of grid & Bomb Populator\r\n\r\n  ///////////////////////// Click Handler\r\n  const squarePressed = (e, index) => {\r\n    if (e.button === 0) {\r\n      console.log(`Left button pressed in Cell`);\r\n    } else if (e.button === 1) {\r\n      console.log(`Right button pressed in Cell`);\r\n    }\r\n\r\n    // After add to require it to be not checked.\r\n    if (props.gameOver === false && props.gridToShow[index].flagged !== true) {\r\n      if (props.gridToShow[index].value === \"💣\") {\r\n        let testingGrid = [...props.gridToShow];\r\n        testingGrid.map((curr) => {\r\n          if (curr.value === \"💣\") {\r\n            curr.advancedChecked = true;\r\n          } else if (curr.flagged === true) {\r\n            curr.flagged = \"wrong\";\r\n          }\r\n        });\r\n        testingGrid[index].value = \"💥\";\r\n        props.gameOverHandler(testingGrid);\r\n      } else {\r\n        mineCheck(index, index);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///////////////////////// Bomb Checker\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n\r\n  const mineCheck = (index, original) => {\r\n    const testingGrid = [...props.gridToShow];\r\n\r\n    let checkerArray = [\r\n      index - props.gridWidth,\r\n      index - props.gridWidth + 1,\r\n      index + 1,\r\n      index + props.gridWidth + 1,\r\n      index + props.gridWidth,\r\n      index + props.gridWidth - 1,\r\n      index - 1,\r\n      index - props.gridWidth - 1,\r\n    ];\r\n\r\n    let bombCounter = 0;\r\n\r\n    console.log(`Begining. Index: ${index}, gridWith: ${props.gridWidth}`);\r\n    if (index % props.gridWidth === 0) {\r\n      if (index === 0) {\r\n        console.log(`Top Left corner init`);\r\n        // Top Left Corner\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[0] &&\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      } else if (index === props.size - props.gridWidth) {\r\n        // Bottom Left Corner\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[4] &&\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      } else {\r\n        // Left Wall\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      }\r\n    } else if (index % props.gridWidth === props.gridWidth - 1) {\r\n      if (index === props.gridWidth - 1) {\r\n        // Top Right Corner\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[0] &&\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n\r\n        // DEBUGGIN HERE.\r\n        console.log(`tempArray: ${tempArray}`);\r\n\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      } else if (index === props.size - 1) {\r\n        // Bottom Right Corner\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[4] &&\r\n            curr !== checkerArray[5]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      } else {\r\n        // Right Wall\r\n        testingGrid[index].advancedChecked = true;\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        console.log(\r\n          `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n        );\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n            return mineCheck(curr, original);\r\n          });\r\n          console.log(tempArrayAdvance);\r\n        }\r\n      }\r\n    } else if (index > 0 && index < props.gridWidth - 1) {\r\n      // Top Wall strickly\r\n      testingGrid[index].advancedChecked = true;\r\n      const tempArray = checkerArray.filter(\r\n        (curr) =>\r\n          curr !== checkerArray[0] &&\r\n          curr !== checkerArray[1] &&\r\n          curr !== checkerArray[7]\r\n      );\r\n      bombCounter = 0;\r\n\r\n      tempArray.map((curr) => {\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n      console.log(\r\n        `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n      );\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = tempArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n          return mineCheck(curr, original);\r\n        });\r\n        console.log(tempArrayAdvance);\r\n      }\r\n    } else if (index > props.size - props.gridWidth && index < props.size - 1) {\r\n      // Bottom Wall strickly\r\n      testingGrid[index].advancedChecked = true;\r\n      const tempArray = checkerArray.filter(\r\n        (curr) =>\r\n          curr !== checkerArray[3] &&\r\n          curr !== checkerArray[4] &&\r\n          curr !== checkerArray[5]\r\n      );\r\n      bombCounter = 0;\r\n\r\n      tempArray.map((curr) => {\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n      console.log(\r\n        `index: ${index}, mines: ${bombCounter}, tempArray: ${tempArray}`\r\n      );\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = tempArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n          return mineCheck(curr, original);\r\n        });\r\n        console.log(tempArrayAdvance);\r\n      }\r\n    } else {\r\n      testingGrid[index].advancedChecked = true;\r\n      // Just check all of them for now and later optimize.\r\n      // Remember to also add to the others when initially filtering.\r\n      // const tempArray = checkerArray.filter((curr) => {\r\n      //   console.log(`curr on error: ${curr}`);\r\n      //   return testingGrid[curr].checked !== true;\r\n      // });\r\n      // Not agains't the wall\r\n      bombCounter = 0;\r\n\r\n      checkerArray.map((curr) => {\r\n        console.log(curr);\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n      console.log(`index: ${index}, mines: ${bombCounter}`);\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = checkerArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          console.log(`checkerArray to advance: ${curr} from: ${index}`);\r\n          return mineCheck(curr, original);\r\n        });\r\n        console.log(tempArrayAdvance);\r\n      }\r\n    }\r\n\r\n    props.gridToShowHandler(testingGrid);\r\n  };\r\n\r\n  return (\r\n    <BoardStyled>\r\n      {props.gridToShow.map((curr, index) => {\r\n        return (\r\n          <Cell\r\n            onClick={(e) => squarePressed(e, index)}\r\n            onContextMenu={(e) => props.flagHandler(e, index)}\r\n            gridWidth={props.gridWidth}\r\n            key={index}\r\n            pressed={curr.advancedChecked}\r\n            value={\r\n              curr.advancedChecked === false\r\n                ? curr.flagged === true\r\n                  ? \"🚩\"\r\n                  : curr.flagged === \"wrong\"\r\n                  ? \"❌\"\r\n                  : \"\"\r\n                : curr.value !== \"💣\"\r\n                ? curr.value\r\n                : curr.flagged === \"wrong\"\r\n                ? \"wrong\"\r\n                : \"💣\"\r\n            }\r\n            // {/*value={curr.value === \"💣\" ? \"💣\" : curr.value + \" \" + index}*/}\r\n          />\r\n        );\r\n      })}\r\n    </BoardStyled>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const GameStyled = styled.div`\r\n  /* display: flex;\r\n  align-items: center;\r\n  justify-content: center; */\r\n  margin: 20% auto;\r\n  width: 80vw;\r\n  height: 80vw;\r\n  max-width: 700px;\r\n  max-height: 700px;\r\n\r\n  @media (min-width: 800px) {\r\n    margin: 5% auto;\r\n  }\r\n`;\r\n\r\nexport const ScoreBoard = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin: 5px 0;\r\n`;\r\n\r\nexport const Reset = styled.button`\r\n  margin: 0 10px;\r\n`;\r\n\r\nexport const Paragraph = styled.p`\r\n  margin: 0 10px;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Board } from \"./../index\";\r\n\r\nimport { GameStyled, Reset, ScoreBoard, Paragraph } from \"./Game.styled\";\r\n\r\nexport const Game = () => {\r\n  const [gridWidth, setGridWidth] = useState(8);\r\n  const [size, setSize] = useState(64);\r\n  const [bombs, setBombs] = useState(10);\r\n  const [gridToShow, setgridToShow] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [runGridGen, setRunGridGen] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (runGridGen === true) {\r\n      setRunGridGen(false);\r\n      const populatedGrid = [];\r\n      for (let i = 0; i < size - bombs; i++) {\r\n        populatedGrid.push({\r\n          value: \"0\",\r\n          checked: false,\r\n          advancedChecked: false,\r\n          flagged: false,\r\n        });\r\n      }\r\n      for (let j = 0; j < bombs; j++) {\r\n        populatedGrid.push({\r\n          value: \"💣\",\r\n          checked: false,\r\n          advancedChecked: false,\r\n          flagged: false,\r\n        });\r\n      }\r\n      setgridToShow(populatedGrid.sort((a, b) => Math.random() - 0.5));\r\n    }\r\n  }, [runGridGen]);\r\n\r\n  const flagHandler = (e, index) => {\r\n    e.preventDefault();\r\n    let tempGrid = [...gridToShow];\r\n    if (tempGrid[index].advancedChecked === false) {\r\n      if (tempGrid[index].flagged === false) {\r\n        tempGrid[index].flagged = true;\r\n      } else {\r\n        tempGrid[index].flagged = false;\r\n      }\r\n    }\r\n    setgridToShow(tempGrid);\r\n    console.log(gridToShow[index]);\r\n  };\r\n\r\n  const gridToShowHandler = (newArray) => {\r\n    setgridToShow(newArray);\r\n  };\r\n\r\n  const gameOverHandler = (grid) => {\r\n    setGameOver(true);\r\n    setgridToShow(grid);\r\n  };\r\n\r\n  return (\r\n    <GameStyled>\r\n      {/* Testing */}\r\n      <ScoreBoard>\r\n        <Reset\r\n          onClick={() => {\r\n            setRunGridGen(true);\r\n            setGameOver(false);\r\n          }}\r\n        >\r\n          ↻\r\n        </Reset>\r\n        <Paragraph>Timer:</Paragraph>\r\n        <Paragraph>{gameOver === false ? \"\" : \"Game Over!\"}</Paragraph>\r\n      </ScoreBoard>\r\n      <Board\r\n        gridWidth={gridWidth}\r\n        size={size}\r\n        bombs={bombs}\r\n        gameOver={gameOver}\r\n        gridToShow={gridToShow}\r\n        gameOverHandler={gameOverHandler}\r\n        gridToShowHandler={gridToShowHandler}\r\n        flagHandler={flagHandler}\r\n      />\r\n    </GameStyled>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Theme, GlobalStyle } from \"./App.styled\";\r\n\r\nimport { Game } from \"./components\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Theme>\r\n      <GlobalStyle />\r\n      <Game />\r\n    </Theme>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}