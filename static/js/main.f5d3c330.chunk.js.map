{"version":3,"sources":["App.styled.js","components/Cell/Cell.styled.js","components/Cell/Cell.jsx","components/Board/Board.styled.js","components/Board/Board.jsx","components/Game/Game.styled.js","components/Game/Game.jsx","components/Timer/Timer.jsx","App.js","index.js"],"names":["Theme","styled","div","GlobalStyle","createGlobalStyle","CellStyled","props","gridWidth","margin","pressed","Cell","value","rest","BoardStyled","Board","mineCheck","index","original","testingGrid","gridToShow","checkerArray","bombCounter","flagged","advancedChecked","tempArray","filter","curr","map","checked","size","gridToShowHandler","onClick","e","button","console","log","gameOver","won","gameOverHandler","squarePressed","onContextMenu","flagHandler","key","class","style","GameStyled","ScoreBoard","TimerText","GameStatus","IconGroup","Icon","Game","useState","bombs","setgridToShow","setGameOver","runGridGen","setRunGridGen","checkedNumber","setCheckedNumber","flaggedAmount","setFlaggedAmount","setWon","useEffect","tempGrid","populatedGrid","i","push","j","sort","a","b","Math","random","noMargin","grid","newArray","advCheckedAmount","preventDefault","TempFlaggedAmount","Timer","timerSeconds","setTimerSeconds","hasRun","setHasRun","counterRef","useRef","clearInterval","current","startTimer","setInterval","Number","toFixed","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5d3c330.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const Theme = styled.div`\r\n  width: calc(100vw - (100vw - 100%));\r\n  height: calc(100vh - (100vh - 100%));\r\n`;\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nconst margin = 1;\r\n\r\nexport const CellStyled = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 600;\r\n\r\n  /* Have it modular, don't hard code the 8 or the 4. */\r\n  /* Centering numbers & bombs in Cell */\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  width: calc((100% / ${(props) => props.gridWidth}) - ${margin * 2}px);\r\n  height: calc((100% / ${(props) => props.gridWidth}) - ${margin * 2}px);\r\n  background-color: ${(props) =>\r\n    props.pressed ? \"hsl(0deg 0% 77%)\" : \"hsl(0deg 0% 74%)\"};\r\n  margin: ${margin}px;\r\n\r\n  box-shadow: ${(props) =>\r\n    props.pressed\r\n      ? \"inset 2px 2px 1px 1px hsl(0deg 0% 40%)\"\r\n      : \"inset -2px -2px 1px 1px hsl(0deg 0% 40%)\"};\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { CellStyled } from \"./Cell.styled\";\r\n\r\nexport const Cell = ({ gridWidth, value, pressed, ...rest }) => {\r\n  // console.log(value);\r\n\r\n  return (\r\n    <CellStyled gridWidth={gridWidth} pressed={pressed} {...rest}>\r\n      {value}\r\n    </CellStyled>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const BoardStyled = styled.div`\r\n  background-color: white;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n  height: 85%;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { Cell } from \"./../index\";\r\n\r\nimport { BoardStyled } from \"./Board.styled\";\r\n\r\nexport const Board = (props) => {\r\n  ///////////////////////// Creator of grid & Bomb Populator\r\n\r\n  ///////////////////////// Click Handler\r\n  const squarePressed = (e, index) => {\r\n    if (e.button === 0) {\r\n      console.log(`Left button pressed in Cell`);\r\n    } else if (e.button === 1) {\r\n      console.log(`Right button pressed in Cell`);\r\n    }\r\n\r\n    // After add to require it to be not checked.\r\n    if (\r\n      props.gameOver === false &&\r\n      props.won !== true &&\r\n      props.gridToShow[index].flagged !== true\r\n    ) {\r\n      if (props.gridToShow[index].value === \"💣\") {\r\n        let testingGrid = [...props.gridToShow];\r\n        testingGrid.map((curr) => {\r\n          if (curr.value === \"💣\") {\r\n            curr.advancedChecked = true;\r\n          } else if (curr.flagged === true) {\r\n            curr.flagged = \"wrong\";\r\n          }\r\n        });\r\n        // Here we will start showing a bomb insead of the explosion. Maybe?\r\n        testingGrid[index].value = \"💥\";\r\n        props.gameOverHandler(testingGrid);\r\n      } else {\r\n        mineCheck(index, index);\r\n      }\r\n    }\r\n  };\r\n\r\n  ///////////////////////// Bomb Checker\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n  //////////////////////////////////////////////////////////\r\n\r\n  // Doesn't work like this. It has to have a fixed initial zero and only add to it.\r\n\r\n  const mineCheck = (index, original) => {\r\n    const testingGrid = [...props.gridToShow];\r\n\r\n    let checkerArray = [\r\n      index - props.gridWidth,\r\n      index - props.gridWidth + 1,\r\n      index + 1,\r\n      index + props.gridWidth + 1,\r\n      index + props.gridWidth,\r\n      index + props.gridWidth - 1,\r\n      index - 1,\r\n      index - props.gridWidth - 1,\r\n    ];\r\n\r\n    let bombCounter = 0;\r\n\r\n    if (index % props.gridWidth === 0) {\r\n      if (index === 0) {\r\n        // Top Left Corner\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[0] &&\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      } else if (index === props.size - props.gridWidth) {\r\n        // Bottom Left Corner\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[4] &&\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      } else {\r\n        // Left Wall\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[5] &&\r\n            curr !== checkerArray[6] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      }\r\n    } else if (index % props.gridWidth === props.gridWidth - 1) {\r\n      if (index === props.gridWidth - 1) {\r\n        // Top Right Corner\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[0] &&\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[7]\r\n        );\r\n\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      } else if (index === props.size - 1) {\r\n        // Bottom Right Corner\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3] &&\r\n            curr !== checkerArray[4] &&\r\n            curr !== checkerArray[5]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      } else {\r\n        // Right Wall\r\n        if (testingGrid[index].flagged !== true) {\r\n          testingGrid[index].advancedChecked = true;\r\n        }\r\n        const tempArray = checkerArray.filter(\r\n          (curr) =>\r\n            curr !== checkerArray[1] &&\r\n            curr !== checkerArray[2] &&\r\n            curr !== checkerArray[3]\r\n        );\r\n        bombCounter = 0;\r\n        tempArray.map((curr) => {\r\n          if (testingGrid[curr].value === \"💣\") {\r\n            bombCounter++;\r\n          }\r\n          testingGrid[curr].checked = true;\r\n        });\r\n        testingGrid[index].value = bombCounter;\r\n\r\n        if (bombCounter === 0) {\r\n          // does not mutate - Advance Algorithm\r\n          const tempArrayAdvance = tempArray.filter(\r\n            (curr) =>\r\n              testingGrid[curr].advancedChecked !== true &&\r\n              testingGrid[curr].value !== \"💣\" &&\r\n              curr !== original\r\n          );\r\n          tempArrayAdvance.map((curr) => {\r\n            return mineCheck(curr, original);\r\n          });\r\n        }\r\n      }\r\n    } else if (index > 0 && index < props.gridWidth - 1) {\r\n      // Top Wall strickly\r\n      if (testingGrid[index].flagged !== true) {\r\n        testingGrid[index].advancedChecked = true;\r\n      }\r\n      const tempArray = checkerArray.filter(\r\n        (curr) =>\r\n          curr !== checkerArray[0] &&\r\n          curr !== checkerArray[1] &&\r\n          curr !== checkerArray[7]\r\n      );\r\n      bombCounter = 0;\r\n\r\n      tempArray.map((curr) => {\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = tempArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          return mineCheck(curr, original);\r\n        });\r\n      }\r\n    } else if (index > props.size - props.gridWidth && index < props.size - 1) {\r\n      // Bottom Wall strickly\r\n      if (testingGrid[index].flagged !== true) {\r\n        testingGrid[index].advancedChecked = true;\r\n      }\r\n      const tempArray = checkerArray.filter(\r\n        (curr) =>\r\n          curr !== checkerArray[3] &&\r\n          curr !== checkerArray[4] &&\r\n          curr !== checkerArray[5]\r\n      );\r\n      bombCounter = 0;\r\n\r\n      tempArray.map((curr) => {\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = tempArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          return mineCheck(curr, original);\r\n        });\r\n      }\r\n    } else {\r\n      if (testingGrid[index].flagged !== true) {\r\n        testingGrid[index].advancedChecked = true;\r\n      }\r\n      // Just check all of them for now and later optimize.\r\n      // Remember to also add to the others when initially filtering.\r\n      // const tempArray = checkerArray.filter((curr) => {\r\n      //   console.log(`curr on error: ${curr}`);\r\n      //   return testingGrid[curr].checked !== true;\r\n      // });\r\n      // Not agains't the wall\r\n      bombCounter = 0;\r\n\r\n      checkerArray.map((curr) => {\r\n        if (testingGrid[curr].value === \"💣\") {\r\n          bombCounter++;\r\n        }\r\n        testingGrid[curr].checked = true;\r\n      });\r\n      testingGrid[index].value = bombCounter;\r\n      if (bombCounter === 0) {\r\n        // does not mutate - Advance Algorithm\r\n        const tempArrayAdvance = checkerArray.filter(\r\n          (curr) =>\r\n            testingGrid[curr].advancedChecked !== true &&\r\n            testingGrid[curr].value !== \"💣\" &&\r\n            curr !== original\r\n        );\r\n        tempArrayAdvance.map((curr) => {\r\n          return mineCheck(curr, original);\r\n        });\r\n      }\r\n    }\r\n\r\n    props.gridToShowHandler(testingGrid);\r\n  };\r\n\r\n  return (\r\n    <BoardStyled>\r\n      {props.gridToShow.map((curr, index) => {\r\n        return (\r\n          <Cell\r\n            onClick={(e) => squarePressed(e, index)}\r\n            onContextMenu={(e) => props.flagHandler(e, index)}\r\n            gridWidth={props.gridWidth}\r\n            key={index}\r\n            pressed={curr.advancedChecked}\r\n            value={\r\n              curr.advancedChecked === false ? (\r\n                curr.flagged === true ? (\r\n                  // flag\r\n                  <i class=\"fas fa-flag\" style={{ \"font-size\": \"30px\" }}></i>\r\n                ) : curr.flagged === \"wrong\" ? (\r\n                  <i class=\"fas fa-flag\" style={{ \"font-size\": \"30px\" }}></i>\r\n                ) : (\r\n                  \"\"\r\n                )\r\n              ) : curr.value !== \"💣\" ? (\r\n                curr.value === 0 ? (\r\n                  \"\"\r\n                ) : curr.flagged === true ? (\r\n                  // flag\r\n                  // <Icons>\r\n                  <i class=\"far fa-flag fa-lg\"></i>\r\n                ) : // </Icons>\r\n                curr.flagged === \"wrong\" ? (\r\n                  \"wrong\"\r\n                ) : (\r\n                  curr.value\r\n                )\r\n              ) : (\r\n                // bomb\r\n                <i class=\"fas fa-bomb fa-lg\"></i>\r\n              )\r\n            }\r\n            // {/*value={curr.value === \"💣\" ? \"💣\" : curr.value + \" \" + index}*/}\r\n          />\r\n        );\r\n      })}\r\n    </BoardStyled>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const GameStyled = styled.div`\r\n  position: relative;\r\n  margin: 20% auto;\r\n  border: 15px ridge lightgrey;\r\n  width: 80vw;\r\n  height: calc(80vw + 12vw);\r\n  max-width: 700px;\r\n  max-height: 700px;\r\n\r\n  @media (min-width: 800px) {\r\n    margin: 5% auto;\r\n  }\r\n`;\r\n\r\nexport const ScoreBoard = styled.div`\r\n  display: flex;\r\n  flex-grow: 0;\r\n  justify-content: space-between;\r\n\r\n  font-size: calc(8vw);\r\n  font-weight: 400;\r\n  color: white;\r\n\r\n  width: 100%;\r\n  height: 15%;\r\n  background-color: hsl(0deg 0% 55%);\r\n  @media (min-width: 800px) {\r\n    font-size: 63.68px;\r\n  }\r\n`;\r\n\r\nexport const TimerText = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  margin: auto;\r\n  /* width: calc(100% + 20%); */\r\n  width: 25vw;\r\n\r\n  @media (min-width: 800px) {\r\n    width: 200px;\r\n  }\r\n`;\r\n\r\nexport const GameStatus = styled.div`\r\n  font-size: 30px;\r\n  position: absolute;\r\n  top: calc(50% + 30px + 16px);\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: yellow;\r\n`;\r\n\r\nexport const IconGroup = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nexport const Icon = styled.div`\r\n  transform: translateY(15%);\r\n\r\n  @media (min-width: 330px) {\r\n    margin: 5px;\r\n  }\r\n`;","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Board, Timer } from \"./../index\";\r\n\r\nimport {\r\n  GameStyled,\r\n  Reset,\r\n  ScoreBoard,\r\n  TimerText,\r\n  GameStatus,\r\n  IconGroup,\r\n  Icon,\r\n} from \"./Game.styled\";\r\n\r\nexport const Game = () => {\r\n  const [gridWidth, setGridWidth] = useState(8);\r\n  const [size, setSize] = useState(64);\r\n  const [bombs, setBombs] = useState(8);\r\n  const [gridToShow, setgridToShow] = useState([]);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [runGridGen, setRunGridGen] = useState(true);\r\n  const [checkedNumber, setCheckedNumber] = useState(0);\r\n  const [flaggedAmount, setFlaggedAmount] = useState(bombs);\r\n  const [won, setWon] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (checkedNumber === size - bombs) {\r\n      setWon(true);\r\n      const tempGrid = [...gridToShow];\r\n      tempGrid.map((curr) => {\r\n        curr.advancedChecked = true;\r\n      });\r\n      setgridToShow(tempGrid);\r\n    }\r\n  }, [checkedNumber]);\r\n\r\n  useEffect(() => {\r\n    if (runGridGen === true) {\r\n      setRunGridGen(false);\r\n      setCheckedNumber(0);\r\n      setFlaggedAmount(bombs);\r\n      const populatedGrid = [];\r\n      for (let i = 0; i < size - bombs; i++) {\r\n        populatedGrid.push({\r\n          value: \"0\",\r\n          checked: false,\r\n          advancedChecked: false,\r\n          flagged: false,\r\n        });\r\n      }\r\n      for (let j = 0; j < bombs; j++) {\r\n        populatedGrid.push({\r\n          value: \"💣\",\r\n          checked: false,\r\n          advancedChecked: false,\r\n          flagged: false,\r\n        });\r\n      }\r\n      setgridToShow(populatedGrid.sort((a, b) => Math.random() - 0.5));\r\n    }\r\n  }, [runGridGen]);\r\n\r\n  const flagHandler = (e, index) => {\r\n    e.preventDefault();\r\n    if (gameOver === false && won !== true) {\r\n      let tempGrid = [...gridToShow];\r\n      if (tempGrid[index].advancedChecked === false) {\r\n        if (tempGrid[index].flagged === false) {\r\n          tempGrid[index].flagged = true;\r\n\r\n          let TempFlaggedAmount = flaggedAmount;\r\n          TempFlaggedAmount--;\r\n          setFlaggedAmount(TempFlaggedAmount);\r\n        } else {\r\n          tempGrid[index].flagged = false;\r\n\r\n          let TempFlaggedAmount = flaggedAmount;\r\n          TempFlaggedAmount++;\r\n          setFlaggedAmount(TempFlaggedAmount);\r\n        }\r\n      }\r\n      setgridToShow(tempGrid);\r\n      console.log(gridToShow[index]);\r\n    }\r\n  };\r\n\r\n  const gridToShowHandler = (newArray) => {\r\n    setgridToShow(newArray);\r\n\r\n    // Not the most efficient way to run another loop everytime, but it works.\r\n    let advCheckedAmount = 0;\r\n    gridToShow.map((curr) => {\r\n      if (curr.advancedChecked) {\r\n        advCheckedAmount++;\r\n      }\r\n    });\r\n    setCheckedNumber(advCheckedAmount);\r\n  };\r\n\r\n  const gameOverHandler = (grid) => {\r\n    setGameOver(true);\r\n    setgridToShow(grid);\r\n  };\r\n\r\n  return (\r\n    <GameStyled>\r\n      {/* Testing */}\r\n      <ScoreBoard>\r\n        <IconGroup\r\n          onClick={() => {\r\n            setRunGridGen(true);\r\n            setGameOver(false);\r\n            setWon(false);\r\n            setCheckedNumber(0);\r\n          }}\r\n        >\r\n          <Icon>\r\n            {/* Reset Icon */}\r\n            <i\r\n              class=\"fas fa-redo-alt\"\r\n              style={{ margin: \"auto 0 auto 10px\" }}\r\n            ></i>\r\n          </Icon>\r\n        </IconGroup>\r\n        <IconGroup>\r\n          <Icon>\r\n            {/* clock Icon */}\r\n            <i\r\n              class=\"far fa-clock fa-lg\"\r\n              style={{ \"margin-right\": \"10px\" }}\r\n            ></i>\r\n          </Icon>\r\n          <div style={{margin: \"auto\"}}>\r\n            <TimerText>\r\n              <Timer\r\n                won={won}\r\n                gameOver={gameOver}\r\n                checkedNumber={checkedNumber}\r\n                runGridGen={runGridGen}\r\n              />\r\n            </TimerText>\r\n          </div>\r\n        </IconGroup>\r\n        <IconGroup>\r\n          <Icon>\r\n            {/* flag Icon */}\r\n            <i class=\"far fa-flag fa-lg\" style={{ \"margin-right\": \"10px\" }}></i>\r\n          </Icon>\r\n          <div noMargin={true} style={{ margin: \"auto 10px auto 0\" }}>\r\n            {flaggedAmount}\r\n          </div>\r\n        </IconGroup>\r\n      </ScoreBoard>\r\n      <GameStatus>\r\n        {gameOver === true ? \"Game Over!\" : won === true ? \"You won!\" : \"\"}\r\n      </GameStatus>\r\n        <Board\r\n        gridWidth={gridWidth}\r\n        size={size}\r\n        bombs={bombs}\r\n        gameOver={gameOver}\r\n        gridToShow={gridToShow}\r\n        checkedNumber={checkedNumber}\r\n        gameOverHandler={gameOverHandler}\r\n        gridToShowHandler={gridToShowHandler}\r\n        flagHandler={flagHandler}\r\n        won={won}\r\n      />\r\n    </GameStyled>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const Timer = (props) => {\r\n  const [timerSeconds, setTimerSeconds] = useState(\"000.00\");\r\n  const [hasRun, setHasRun] = useState(false);\r\n\r\n  const counterRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // console.log(`PAUSED RUN`);\r\n\r\n    if (\r\n      props.checkedNumber === 0 ||\r\n      props.runGridGen === true ||\r\n      props.gameOver === true ||\r\n      props.won === true\r\n    ) {\r\n      console.log(`PAUSED IF STATEMENT RUN`);\r\n      clearInterval(counterRef.current);\r\n      setHasRun(false);\r\n    }\r\n  }, [timerSeconds, props.runGridGen, props.won, props.gameOver]);\r\n\r\n  console.log(`Checked Number: ${props.checkedNumber}`);\r\n\r\n  useEffect(() => {\r\n    if (props.gameOver || props.won || props.runGridGen) {\r\n      setTimerSeconds(\"000.00\");\r\n    }\r\n\r\n    if (\r\n      props.gameOver !== true &&\r\n      props.won !== true &&\r\n      props.checkedNumber !== 0 &&\r\n      hasRun === false &&\r\n      props.runGridGen !== true\r\n    ) {\r\n      console.log(`START TIMER RUN`);\r\n      startTimer();\r\n      setHasRun(true);\r\n    }\r\n  }, [props.checkedNumber, props.runGridGen]);\r\n\r\n  const startTimer = () => {\r\n    counterRef.current = setInterval(() => {\r\n      // Need to use the Date object, this way is veryy inacurate when using miliseconds.\r\n      setTimerSeconds((timerSeconds) =>\r\n        timerSeconds <= 9.99\r\n          ? \"00\" + (Number(timerSeconds) + 0.01).toFixed(2)\r\n          : timerSeconds <= 99.99\r\n          ? \"0\" + (Number(timerSeconds) + 0.01).toFixed(2)\r\n          : (Number(timerSeconds) + Number(\"000.01\")).toFixed(2)\r\n      );\r\n    }, 10);\r\n  };\r\n\r\n  return timerSeconds;\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Theme, GlobalStyle } from \"./App.styled\";\r\n\r\nimport { Game } from \"./components\";\r\n\r\nexport const App = () => {\r\n  return (\r\n    <Theme>\r\n      <GlobalStyle />\r\n      <Game />\r\n    </Theme>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}